{"version":3,"sources":["running.svg","editor/lists.ts","editor/templates.ts","editor/consts.ts","editor/utils.ts","components/TemplateBlock.tsx","context/InitialState.ts","components/Element.tsx","components/Leaf.tsx","components/MarkButton.tsx","components/BlockButton.tsx","components/ListButton.tsx","components/Toolbar.tsx","components/FunctionButton.tsx","editor/seralise.ts","components/RichTextEditor.tsx","wraps/VoidBlocks.ts","editor/handlers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditListPlugin","types","typeItem","withEditList","onKeyDown","Editor","Transforms","Element","indentListItem","editor","increaseItemDepth","dedentListItem","decreaseItemDepth","toggleListBlock","type","isSelectionInList","unwrapList","wrapInList","findNextTemplate","at","previousPoint","before","selection","unit","console","log","children","nextTemplateNodeEntry","next","match","node","voids","nextTemplatePath","select","findPreviousTemplate","nextPoint","after","lastTemplateNodeEntry","previous","lastTemplatePath","HOTKEYS","BLOCK_HOTKEYS","FUNCTION_HOTKEYS","LIST_TYPES","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","n","isEditor","SlateElement","isElement","split","newProperties","setNodes","block","wrapNodes","toggleMark","isMarkActive","removeMark","addMark","nodes","marks","TemplateBlock","attributes","element","selected","useSelected","focused","useFocused","useEditor","useState","defaultValue","chosenValue","setChosenValue","opts","options","setOptions","name","setName","editName","setEditName","selectRef","useRef","handleChange","useCallback","newValue","actionMeta","changeProps","handleCreate","inputValue","newOption","createOption","handleNameChange","evt","newName","target","value","path","ReactEditor","findPath","newProps","className","contentEditable","style","boxShadow","transform","placeholder","onInput","e","key","ref","styles","customSelectStyles","theme","customSelectTheme","onChange","onCreateOption","onClick","icon","insertTemplateBlock","templateBlock","text","insertNodes","move","label","toLowerCase","replace","control","provided","state","minHeight","height","paddingTop","valueContainer","getValue","currentOption","margin","width","length","selectProps","minWidth","input","indicatorSeparator","display","indicatorsContainer","menu","marginTop","option","padding","noOptionsMessage","borderRadius","spacing","baseUnit","InitialState","Leaf","leaf","bold","code","italic","underline","pretemplate","backgroundColor","MarkButton","alt","useSlate","onMouseDown","preventDefault","title","BlockButton","ListButton","checkActive","currentList","getCurrentList","Toolbar","FunctionButton","fn","toClipboardMD","navigator","clipboard","writeText","preprocessed","map","preprocessMDNode","processor","unified","use","slateToRemark","stringify","ast","runSync","toMarkdown","then","window","alert","templatesToText","newNode","Text","isText","strong","emphasis","depth","ordered","toHTML","nodeToHTML","join","nodeText","escapeHTML","toClipboardHTML","item","Blob","RichTextEditor","JSON","parse","localStorage","getItem","setValue","setTarget","insertTemplate","setInsertTemplate","renderElement","props","renderLeaf","useMemo","withHistory","withReact","isInline","isVoid","voidElementNames","elemType","withVoids","createEditor","useEffect","content","setItem","Range","isCollapsed","edges","start","distance","beforeRange","range","beforeText","string","blob","fileDownloadUrl","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","remove","fileSelector","addEventListener","event","files","file","fr","FileReader","readAsText","onload","loaded","result","spellCheck","autoFocus","listKeyDown","hotkey","isHotkey","hotkeyHandler","App","src","logo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bdd982b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/running.bda043eb.svg\";","import { Editor as SlateEditor } from \"slate\";\r\nimport { EditListPlugin } from '@productboard/slate-edit-list';\r\n\r\nconst editListOptions = {\r\n    types: [\"bulleted-list\", \"numbered-list\"],\r\n    typeItem: \"list-item\",\r\n}\r\n\r\nexport const [withEditList, onKeyDown, { Editor, Element, Transforms }] = EditListPlugin(editListOptions);\r\n\r\nexport const indentListItem = (editor: SlateEditor): void => {\r\n    Transforms.increaseItemDepth(editor)\r\n}\r\n\r\nexport const dedentListItem = (editor: SlateEditor): void => {\r\n    Transforms.decreaseItemDepth(editor)\r\n}\r\n\r\nexport const makeListBlock = (editor: SlateEditor, type?: string): void => {\r\n    Transforms.wrapInList(editor, type)\r\n}\r\n\r\nexport const unmakeListBlock = (editor: SlateEditor): void => {\r\n    Transforms.unwrapList(editor)\r\n}\r\n\r\nexport const toggleListBlock = (editor: SlateEditor, type?: string): void => {\r\n    const currentlyInList = Editor.isSelectionInList(editor)\r\n    if (!currentlyInList)\r\n        Transforms.wrapInList(editor, type);\r\n    else\r\n        Transforms.unwrapList(editor);\r\n}\r\n\r\nexport const insertNewListItem = (editor: SlateEditor): void => {\r\n    \r\n}","import { Editor, Node, NodeEntry, Location, Transforms } from 'slate';\r\n\r\n// utility functions for finding and navigating to template blocks in the editor\r\n// actually they kinda work - if you have more than one block present, it will go two blocks back\r\n// however, it will skip over the nearest block for reasons i can't understand at the moment\r\n// also, selecting the template should not just take you to the block but also allow you to select the options\r\n// TODO: fix the selection issues\r\n\r\nexport const findNextTemplate = (editor: Editor, at?: Location): void => {\r\n    let previousPoint = Editor.before(editor, at || editor.selection!, {unit: \"block\"})\r\n    console.log(previousPoint, editor.children)\r\n    let nextTemplateNodeEntry = (Editor.next(editor, {at: previousPoint, match: (node: Node) => node.type === \"template-block\", voids: true}) as NodeEntry)\r\n    // console.log(nextTemplateNodeEntry)\r\n    if (!!nextTemplateNodeEntry) {\r\n        let [,nextTemplatePath] = nextTemplateNodeEntry\r\n        Transforms.select(editor, nextTemplatePath);\r\n    }\r\n}\r\n\r\nexport const findPreviousTemplate = (editor: Editor, at?: Location): void => {\r\n    let nextPoint = Editor.after(editor, at || editor.selection!, {unit: \"block\"})\r\n    console.log(nextPoint, editor.children)\r\n    let lastTemplateNodeEntry = (Editor.previous(editor, {at: nextPoint, match: (node: Node) => node.type === \"template-block\", voids: true}) as NodeEntry)\r\n    // console.log(lastTemplateNodeEntry)\r\n    if (!!lastTemplateNodeEntry) {\r\n        let [,lastTemplatePath] = lastTemplateNodeEntry\r\n        Transforms.select(editor, lastTemplatePath)\r\n    }\r\n}\r\n\r\nexport const focusNextTemplateElement = (): void => {\r\n    let currentActive = document.activeElement!.id\r\n    let currentNumber = parseInt(currentActive.match(/\\d+/g)![0])\r\n    const nextSibling = document.querySelector(`#react-select-${currentNumber+2}-index`)\r\n    if (!!nextSibling)\r\n        (nextSibling as any).focus()\r\n}","import { Editor, Location } from 'slate';\r\nimport { findNextTemplate, findPreviousTemplate } from './templates';\r\n\r\nexport const HOTKEYS: Record<string, string> = {\r\n    'mod+b': 'bold',\r\n    'mod+i': 'italic',\r\n    'mod+u': 'underline',\r\n}\r\n\r\nexport const BLOCK_HOTKEYS: Record<string, string> = {\r\n    'mod+alt+1': 'heading-one',\r\n    'mod+alt+2': 'heading-two',\r\n    'mod+alt+3': 'heading-three',\r\n    'mod+alt+4': 'heading-four',\r\n    'mod+.': 'bulleted-list',\r\n    'mod+/': 'numbered-list',\r\n}\r\n\r\nexport const TEMPLATE_NAV_HOTKEYS: Record<string, (editor: Editor, at?: Location) => void> = {\r\n    'mod+]': findNextTemplate,\r\n    'mod+[': findPreviousTemplate,\r\n}\r\n\r\nexport const FUNCTION_HOTKEYS: Record<string, (editor: Editor) => void> = {\r\n    'mod+]': findNextTemplate,\r\n    'mod+[': findPreviousTemplate,\r\n}\r\n\r\nexport const LIST_TYPES: string[] = ['numbered-list', 'bulleted-list']","import { Editor, Transforms, Element as SlateElement, Node, NodeEntry, Path } from 'slate';\r\nimport { LIST_TYPES } from './consts';\r\n\r\nexport const toggleBlock = (editor: Editor, format: string) => {\r\n    const isActive = isBlockActive(editor, format);\r\n    const isList = LIST_TYPES.includes(format)\r\n\r\n    Transforms.unwrapNodes(editor, {\r\n        match: (n) => !Editor.isEditor(n) && SlateElement.isElement(n) && LIST_TYPES.includes(n.type as string),\r\n        split: true\r\n    })\r\n\r\n    const newProperties: Partial<SlateElement> = {\r\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\r\n    }\r\n    Transforms.setNodes(editor, newProperties)\r\n    \r\n    if (!isActive && isList) {\r\n        const block = { type: format, children: [] }\r\n        Transforms.wrapNodes(editor, block)\r\n    }\r\n}\r\n\r\nexport const toggleMark = (editor: Editor, format: string) => {\r\n    const isActive = isMarkActive(editor, format)\r\n\r\n    if (isActive)\r\n        Editor.removeMark(editor, format)\r\n    else\r\n        Editor.addMark(editor, format, true)\r\n}\r\n\r\nexport const isBlockActive = (editor: Editor, format: string) => {\r\n    const [match] = Editor.nodes(editor, {\r\n        match: n => !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\r\n    })\r\n        \r\n    return !!match\r\n}\r\n\r\nexport const isMarkActive = (editor: Editor, format: string) => {\r\n    const marks = Editor.marks(editor);\r\n    return marks ? marks[format] === true : false\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { Editor, Transforms } from 'slate';\r\nimport { RenderElementProps, ReactEditor, useFocused, useSelected, useEditor } from 'slate-react'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport { InlineIcon } from '@iconify/react-with-api';\r\nimport { ValueType } from 'react-select';\r\nimport AutoSizeInput from \"react-input-autosize\";\r\nimport { TEMPLATE_NAV_HOTKEYS } from '../editor/consts';\r\nimport { isHotkey } from 'is-hotkey';\r\n\r\ninterface TemplateBlockProps {\r\n    name?: string;\r\n    opts?: {label:string, value:string}[];\r\n    defaultValue?: {label:string,value:string};\r\n}\r\n\r\n// TODO: add the ability to set the options while the template block is focused/selected\r\nexport const TemplateBlock: React.FC<RenderElementProps> = ({ attributes, children, element }) => {\r\n    const selected = useSelected();\r\n    const focused = useFocused();\r\n    const editor = useEditor();\r\n\r\n    // this next line looks ugly af but i'm not sure how else to do it\r\n    const [chosenValue, setChosenValue] = useState<ValueType<{label:string, value:string},false>>(element.defaultValue ? (element.defaultValue as {label:string,value:string}) : null as ValueType<{label:string,value:string}, false>);\r\n    const [options, setOptions] = useState<{label:string,value:string}[]>(element.opts ? element.opts as {label:string, value:string}[] : [])\r\n    const [name, setName] = useState<string>(element.name as string);\r\n    const [editName, setEditName] = useState(false);\r\n    \r\n    // probably shouldn't be using \"any\" as the type here but idk what else to do lol\r\n    const selectRef = useRef<any>(null);\r\n    const editorSelection = useRef<any>(editor.selection);\r\n    // const [selectActive, setSelectActive] = useState(false);\r\n\r\n    const handleChange = useCallback((newValue: any, actionMeta: any) => {\r\n        setChosenValue(newValue);\r\n        changeProps({defaultValue: newValue})\r\n    }, [setChosenValue])\r\n    \r\n    const handleCreate = useCallback((inputValue: any) => {\r\n        const newOption = createOption(inputValue);\r\n        setOptions([...options, newOption])\r\n        setChosenValue(newOption);\r\n        changeProps({opts: [...options, newOption], defaultValue: newOption})\r\n    }, [setOptions, setChosenValue])\r\n    \r\n    const handleNameChange = useCallback((evt: React.FormEvent) => {\r\n        let newName = (evt.target as HTMLInputElement).value\r\n        setName(newName);\r\n        changeProps({name: newName})\r\n    }, [setName])\r\n    \r\n    const changeProps = useCallback(({name, opts, defaultValue}: TemplateBlockProps) => {\r\n        console.log(\"changeProps called\")\r\n        let path = ReactEditor.findPath(editor, element)\r\n        let newProps = {name, opts, defaultValue}\r\n        console.log(path, newProps, editor.children)\r\n        Transforms.setNodes(editor, newProps, {at:path})\r\n    }, [])\r\n    \r\n    // somewhat unsafe but it works\r\n    // useEffect(() => {\r\n    //     if (focused && selected && !!selectRef) {\r\n    //         editorSelection.current = editor.selection\r\n    //         selectRef!.current!.focus()\r\n    //         // setSelectActive(true);\r\n    //     }\r\n    // }, [focused, selected])\r\n\r\n    // TODO: fix navigation\r\n    // const onKeyDown = (event: any) => {\r\n    //     for (const hotkey in TEMPLATE_NAV_HOTKEYS) {\r\n    //         if (isHotkey(hotkey, event)) {\r\n    //             event.preventDefault();\r\n    //             const fn = TEMPLATE_NAV_HOTKEYS[hotkey];\r\n    //             console.log(editorSelection.current)\r\n    //             fn(editor, editorSelection.current)\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n\r\n    // const onKeyDown = (event: any) => {\r\n    //     console.log(\"keyDown event captured\")\r\n    //     switch (event.key) {\r\n    //         case \"Enter\":\r\n    //             event.preventDefault();\r\n    //             if (focused && selected && !!selectRef && !selectActive) {\r\n    //                 editorSelection.current = editor.selection;\r\n    //                 selectRef.current.focus();\r\n    //                 console.log(\"Should focus selection box\")\r\n    //                 setSelectActive(true);\r\n    //             } else if (selectActive) {\r\n    //                 console.log(\"Should refocus to editor\")\r\n    //                 // refocus to parent\r\n    //             }\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <span {...attributes}\r\n            className=\"template-block\"\r\n            contentEditable={false}\r\n            style={{\r\n                boxShadow: selected && focused ? '0 0 0 2px #b4d5ff' : 'none',\r\n                transform: `translateY(${editName ? 0 : 2}px)`,\r\n            }}>\r\n            {editName ?\r\n            (\r\n                <div className=\"content\">\r\n                    <AutoSizeInput placeholder=\"Name this field...\" value={name} onInput={handleNameChange} onKeyDown={e => e.key === \"Enter\" && setEditName(!editName)} />\r\n                </div>\r\n            )\r\n            : (<CreatableSelect \r\n                    ref={selectRef}\r\n                    styles={customSelectStyles} theme={customSelectTheme}\r\n                    placeholder={name}\r\n                    onChange={handleChange} onCreateOption={handleCreate}\r\n                    value={chosenValue} options={options} />)}\r\n            <button className=\"name-setter\" onClick={() => {\r\n                setEditName(!editName)\r\n            }}><InlineIcon icon=\"bi:gear-fill\" /></button>\r\n            {children}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const insertTemplateBlock = (editor: Editor, {name, opts, defaultValue}: TemplateBlockProps) => {\r\n    const templateBlock = { type: \"template-block\", name, opts, defaultValue, children: [{text: ''}] }\r\n    Transforms.insertNodes(editor, templateBlock);\r\n    Transforms.move(editor);\r\n}\r\n\r\nconst createOption = (label: string) => ({\r\n    label,\r\n    value: label.toLowerCase().replace(/\\W/g, '_')\r\n})\r\n\r\n// auto width: https://stackoverflow.com/questions/46571811/react-select-auto-size-width\r\n// modify height: https://stackoverflow.com/questions/54218351/changing-height-of-react-select-component\r\nconst customSelectStyles = {\r\n    control: (provided: any, state: any) => ({\r\n        ...provided,\r\n        minHeight: \"1.4em\",\r\n        height: \"1.4em\",\r\n        paddingTop: \"1px\",\r\n    }),\r\n    valueContainer: (provided: any, state: any) => {\r\n        // console.log(state);\r\n        let [currentOption] = state.getValue();\r\n        // console.log(currentOption)\r\n        return ({\r\n            ...provided,\r\n            margin: \"0 0 0 4px\",\r\n            transform: \"translateY(-2px)\",\r\n            width: `${(currentOption ? currentOption.label.length : state.selectProps.placeholder ? state.selectProps.placeholder.length : 5) + 2}ex`,\r\n            minWidth: \"5ex\",\r\n        })\r\n    },\r\n    input: (provided: any, state: any) => ({\r\n        ...provided,\r\n        margin: \"0px\",\r\n    }),\r\n    indicatorSeparator: (state: any) => ({\r\n        display: 'none',\r\n    }),\r\n    indicatorsContainer: (provided: any, state: any) => ({\r\n        ...provided,\r\n        height: '1.4em',\r\n    }),\r\n    menu: (provided: any, state: any) => ({\r\n        ...provided,\r\n        marginTop: 0,\r\n    }),\r\n    option: (provided: any) => ({\r\n        ...provided,\r\n        padding: \"5px\",\r\n    }),\r\n    noOptionsMessage: (provided: any) => ({\r\n        ...provided,\r\n        padding: \"5px 0\",\r\n    }),\r\n}\r\n\r\nconst customSelectTheme = (theme: any) => ({\r\n    ...theme,\r\n    borderRadius: 0,\r\n    spacing: {\r\n        ...theme.spacing,\r\n        baseUnit: 0,\r\n    },\r\n})","\r\nexport const InitialState = [\r\n    {\r\n        type: \"paragraph\",\r\n        children: [\r\n            {text: \"Type in {{ to create a template block like this (the gear icon allows you to name the field): \"},\r\n            {\r\n                type: \"template-block\",\r\n                name: \"sex\", \r\n                opts: [{label: \"male\", value: \"male\"}, {label: \"female\", value: \"female\"}],\r\n                defaultValue: {label: 'male', value: 'male'},\r\n                children: [{text: ''}],\r\n            },\r\n            {text: ''},\r\n        ]\r\n    },\r\n    {\r\n        type: \"paragraph\",\r\n        children: [\r\n            {text: \"FastDischarge also comes with all the rich text editing features you know and love!\"}\r\n        ]\r\n    },\r\n]","import React from 'react'\r\nimport { RenderElementProps } from \"slate-react\";\r\nimport { TemplateBlock } from './TemplateBlock';\r\n\r\nexport const Element: React.FC<RenderElementProps> = ({ attributes, children, element }) => {\r\n    switch (element.type) {\r\n        case 'bulleted-list':\r\n            return <ul {...attributes}>{children}</ul>\r\n        case 'numbered-list':\r\n            return <ol {...attributes}>{children}</ol>\r\n        case 'heading-one':\r\n            return <h1 {...attributes}>{children}</h1>\r\n        case 'heading-two':\r\n            return <h2 {...attributes}>{children}</h2>\r\n        case 'heading-three':\r\n            return <h3 {...attributes}>{children}</h3>\r\n        case 'heading-four':\r\n            return <h4 {...attributes}>{children}</h4>\r\n        case 'list-item':\r\n            return <li {...attributes}>{children}</li>\r\n        case 'template-block':\r\n            return <TemplateBlock attributes={attributes} children={children} element={element} />\r\n        default:\r\n            return <p {...attributes}>{children}</p>\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { RenderLeafProps } from 'slate-react'\r\n\r\nexport const Leaf: React.FC<RenderLeafProps> = ({ attributes, children, leaf }) => {\r\n    if (leaf.bold)\r\n        children = <strong>{children}</strong>\r\n        \r\n    if (leaf.code)\r\n        children = <code>{children}</code>\r\n\r\n    if (leaf.italic)\r\n        children = <em>{children}</em>\r\n\r\n    if (leaf.underline)\r\n        children = <u>{children}</u>\r\n        \r\n    if (leaf.pretemplate)\r\n        children = <span style={{borderRadius: \"5px\", backgroundColor: \"#ddd\"}}>{children}</span>\r\n        \r\n    return <span {...attributes}>{children}</span>\r\n}\r\n","import React from 'react';\r\nimport { InlineIcon } from \"@iconify/react-with-api\";\r\nimport { useSlate } from 'slate-react';\r\nimport { isMarkActive, toggleMark } from '../editor/utils';\r\n\r\ninterface Props {\r\n    format: string;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const MarkButton: React.FC<Props> = ({ format, icon, alt }) => {\r\n    const editor = useSlate();\r\n    const isActive = isMarkActive(editor, format);\r\n\r\n    return (\r\n        <li>\r\n            <button className={isActive ? \"active\" : \"\"}\r\n                onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                toggleMark(editor, format)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { InlineIcon } from \"@iconify/react-with-api\";\r\nimport { useSlate } from 'slate-react';\r\nimport { toggleBlock, isBlockActive } from '../editor/utils';\r\n\r\ninterface Props {\r\n    format: string;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const BlockButton: React.FC<Props> = ({ format, icon, alt }) => {\r\n    const editor = useSlate();\r\n    const isActive = isBlockActive(editor, format);\r\n\r\n    return (\r\n        <li>\r\n            <button className={isActive ? \"active\" : \"\"}\r\n                onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                toggleBlock(editor, format)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { InlineIcon } from \"@iconify/react-with-api\";\r\nimport { Editor as SlateEditor } from \"slate\";\r\nimport { useSlate } from 'slate-react';\r\nimport { Editor, toggleListBlock } from '../editor/lists';\r\n\r\ninterface Props {\r\n    format: string;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const ListButton: React.FC<Props> = ({ format, icon, alt }) => {\r\n    const editor = useSlate();\r\n    const isActive = checkActive(editor, format);\r\n\r\n    return (\r\n        <li>\r\n            <button className={isActive ? \"active\" : \"\"}\r\n                onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                toggleListBlock(editor, format)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nconst checkActive = (editor: SlateEditor, format: string) => {\r\n    const currentList = Editor.getCurrentList(editor);\r\n    if (currentList) {\r\n        const [listNode] = currentList;\r\n        return listNode.type === format;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const Toolbar: React.FC = ({ children }) => {\r\n    return (\r\n        <div className=\"toolbar-container\">\r\n            <ul>\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { InlineIcon } from '@iconify/react-with-api';\r\nimport { Editor } from 'slate'\r\nimport { useSlate } from 'slate-react';\r\n\r\ninterface Props {\r\n    fn: (editor: Editor) => void;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const FunctionButton: React.FC<Props> = ({fn, icon, alt}) => {\r\n    const editor = useSlate();\r\n    \r\n    return (\r\n        <li>\r\n            <button onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                fn(editor)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import { Editor, Node, Text } from 'slate';\r\nimport unified from 'unified';\r\nimport { slateToRemark } from 'remark-slate-transformer';\r\nimport stringify from 'remark-stringify';\r\nimport escapeHTML from \"escape-html\";\r\nimport * as clipboard from \"clipboard-polyfill\";\r\n\r\n// two packages seem to work to this end:\r\n// https://github.com/accordproject/markdown-transform/tree/master/packages/markdown-slate/\r\n// https://github.com/inokawa/remark-slate-transformer\r\n\r\n// const slateTransformer = new SlateTransformer();\r\n\r\nexport const toMarkdown = (editor: Editor): string => {\r\n    const preprocessed = editor.children.map(preprocessMDNode)\r\n    const processor = unified().use(slateToRemark).use(stringify)\r\n    const ast = processor.runSync({\r\n        type: \"root\",\r\n        children: preprocessed,\r\n    });\r\n    console.log(ast);\r\n    // const processed = original.map(preprocessMDNode)\r\n    // console.log(processed)\r\n    // console.log(slateTransformer.toCiceroMark(processed))\r\n    // const text = slateTransformer.toMarkdown(processed);\r\n    const text = processor.stringify(ast);\r\n\r\n    return text;\r\n}\r\n\r\nexport const toClipboardMD = (editor: Editor): void => {\r\n    navigator.clipboard.writeText(toMarkdown(editor)).then(() => {\r\n        window.alert(\"Copied successfully!\")\r\n    }, () => {\r\n        window.alert(\"Copying failed!\")\r\n    })\r\n}\r\n\r\nconst templatesToText = (node: Node): Node => {\r\n    let newNode = {...node};\r\n\r\n    if (newNode.children)\r\n        newNode.children = (newNode.children as Node[]).map(templatesToText)\r\n\r\n    switch (newNode.type) {\r\n        case \"template-block\":\r\n            return {text: (newNode.defaultValue ? (newNode.defaultValue as {label:string,value:string}).label : \"\")}\r\n        default:\r\n            return newNode\r\n    }\r\n}\r\n\r\nconst preprocessMDNode = (node: Node): Node => {\r\n    let newNode = {...node};\r\n    // preprocess text nodes so that they return the right formatting\r\n    if (Text.isText(newNode)) {\r\n        newNode.strong = newNode.bold\r\n        newNode.emphasis = newNode.italic\r\n    }\r\n\r\n    if (newNode.children)\r\n        newNode.children = (newNode.children as Node[]).map(preprocessMDNode)\r\n\r\n    switch (newNode.type) {\r\n        case \"heading-one\":\r\n            return {...newNode, type: \"heading\", depth: 1}\r\n        case \"heading-two\":\r\n            return {...newNode, type: \"heading\", depth: 2}\r\n        case \"heading-three\":\r\n            return {...newNode, type: \"heading\", depth: 3}\r\n        case \"heading-four\":\r\n            return {...newNode, type: \"heading\", depth: 4}\r\n        case \"numbered-list\":\r\n            return {...newNode, type: \"list\", ordered: true}\r\n        case \"bulleted-list\":\r\n            return {...newNode, type: \"list\", ordered: false}\r\n        case \"list-item\":\r\n            return {...newNode, type: \"listItem\"}\r\n        case \"template-block\":\r\n            return {text: (newNode.defaultValue ? (newNode.defaultValue as {label:string,value:string}).label : \"\")}\r\n        default:\r\n            return newNode\r\n    }\r\n}\r\n\r\nexport const toHTML = (editor: Editor): string => {\r\n    const preprocessed = editor.children.map(templatesToText)\r\n    return preprocessed.map(nodeToHTML).join('')\r\n}\r\n\r\nconst nodeToHTML = (node: Node): string => {\r\n    if (Text.isText(node)) {\r\n        let nodeText = escapeHTML(node.text)\r\n        \r\n        if (node.bold)\r\n            nodeText = `<strong>${nodeText}</strong>`\r\n\r\n        if (node.italic)\r\n            nodeText = `<em>${nodeText}</em>`\r\n\r\n        if (node.underline)\r\n            nodeText = `<u>${nodeText}</u>`\r\n        \r\n        return nodeText\r\n    }\r\n    \r\n    const children = node.children.map((n: Node) => nodeToHTML(n)).join('')\r\n\r\n    switch (node.type) {\r\n        case \"heading-one\":\r\n            return `<h1>${children}</h1>`\r\n        case \"heading-two\":\r\n            return `<h2>${children}</h2>`\r\n        case \"heading-three\":\r\n            return `<h3>${children}</h3>`\r\n        case \"heading-four\":\r\n            return `<h4>${children}</h4>`\r\n        case \"bulleted-list\":\r\n            return `<ul>${children}</ul>`\r\n        case \"numbered-list\":\r\n            return `<ol>${children}</ol>`\r\n        case \"list-item\":\r\n            return `<li>${children}</li>`\r\n        default:\r\n            return children\r\n    }\r\n}\r\n\r\nexport const toClipboardHTML = (editor: Editor): void => {\r\n    // can't use the new async clipboard API because it doesn't support rich text\r\n    // i normally try to avoid installing packages if i can help it but anyway, here we are\r\n    const item = new clipboard.ClipboardItem({\r\n        \"text/html\": new Blob([toHTML(editor)], {type: \"text/html\"}),\r\n    })\r\n    clipboard.write([item]);\r\n}","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { Editable, withReact, Slate } from \"slate-react\";\r\nimport { createEditor, Editor, Location, Node, Range, Transforms } from \"slate\";\r\nimport { withHistory } from \"slate-history\";\r\n\r\nimport { withEditList, onKeyDown as listKeyDown, indentListItem, dedentListItem } from \"./../editor/lists\"\r\nimport { hotkeyHandler } from '../editor/handlers'\r\nimport { withVoids } from './../wraps/VoidBlocks';\r\nimport { insertTemplateBlock } from \"./TemplateBlock\";\r\nimport { InitialState } from \"./../context/InitialState\";\r\n\r\nimport { Element } from './Element';\r\nimport { Leaf } from './Leaf';\r\nimport { MarkButton } from \"./MarkButton\";\r\nimport { BlockButton } from \"./BlockButton\";\r\nimport { ListButton } from \"./ListButton\";\r\nimport { Toolbar } from './Toolbar'\r\nimport { FunctionButton } from \"./FunctionButton\";\r\nimport { toClipboardHTML, toClipboardMD } from \"../editor/seralise\";\r\n\r\n// TODO: implement template uploading\r\n// see here: https://stackoverflow.com/questions/57007536/react-js-reading-from-a-local-file\r\n\r\nexport const RichTextEditor: React.FC = () => {\r\n    const [value, setValue] = useState<Node[]>(JSON.parse((localStorage.getItem(\"content\") as string)) || InitialState);\r\n    const [target, setTarget] = useState<Location | null>();\r\n    const [insertTemplate, setInsertTemplate] = useState(false);\r\n    const renderElement = useCallback(props => <Element {...props} />, [])\r\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n\r\n    const editor = useMemo(() => withHistory(withEditList(withReact(withVoids(createEditor())))), [])\r\n    \r\n    // useEffect hook for inserting template tags\r\n    useEffect(() => {\r\n        if (!!target && insertTemplate) {\r\n            Transforms.select(editor, target!);\r\n            insertTemplateBlock(editor, {})\r\n            setInsertTemplate(false);\r\n            setTarget(null);\r\n        }\r\n    }, [target])\r\n    \r\n    const exportTemplateAsFile = () => {\r\n        const blob = new Blob([JSON.stringify(editor.children)], {type: \"application/json\"})\r\n        const fileDownloadUrl = URL.createObjectURL(blob);\r\n        let tempLink = document.createElement(\"a\")\r\n        tempLink.href = fileDownloadUrl;\r\n        tempLink.setAttribute(\"download\", \"template.fdt\")\r\n        tempLink.click()\r\n        tempLink.remove()\r\n    }\r\n    \r\n    const loadTemplateFromFile = () => {\r\n        // see here: \r\n        // https://codepen.io/rkotze/pen/zjRXYr\r\n        // https://stackoverflow.com/questions/57007536/react-js-reading-from-a-local-file\r\n        // console.log(\"File popup should now appear\")\r\n        const fileSelector = document.createElement(\"input\");\r\n        fileSelector.setAttribute(\"type\", \"file\")\r\n        fileSelector.click()\r\n        fileSelector.addEventListener(\"change\", event => {\r\n            if (fileSelector.files && fileSelector.files.length >= 1) {\r\n                let file = fileSelector.files![0], fr = new FileReader();\r\n                fr.readAsText(file)\r\n                fr.onload = event => {\r\n                    let loaded = JSON.parse((event.target!.result as string))\r\n                    setValue(loaded)\r\n                }\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <Slate editor={editor} value={value} onChange={value => {\r\n            setValue(value);\r\n            const content = JSON.stringify(value);\r\n            localStorage.setItem(\"content\", content)\r\n            console.log(value)\r\n\r\n            // you should be able to replace this code block with this addon:\r\n            // https://github.com/ianstormtaylor/slate-plugins/tree/master/packages/slate-auto-replace\r\n            const { selection } = editor;\r\n            // if nothing is currently selected under the cursor\r\n            if (selection && Range.isCollapsed(selection)) {\r\n                const [start] = Range.edges(selection);\r\n                // if the two characters beforce the cursor are {{, select them and replace with a template block\r\n                const before = Editor.before(editor, start, {distance: 2})\r\n                const beforeRange = before && Editor.range(editor, before, start)\r\n                const beforeText = beforeRange && Editor.string(editor, beforeRange)\r\n                const beforeMatch = beforeText && beforeText.match(/\\{\\{/);\r\n                if (beforeMatch) {\r\n                    setInsertTemplate(true);\r\n                    setTarget(beforeRange as Location);\r\n                }\r\n            }\r\n        }}>\r\n            <Toolbar>\r\n                <MarkButton format=\"bold\" icon=\"gridicons:bold\" alt=\"Bold (Ctrl+B)\" />\r\n                <MarkButton format=\"italic\" icon=\"gridicons:italic\" alt=\"Italic (Ctrl+I)\" />\r\n                <MarkButton format=\"underline\" icon=\"gridicons:underline\" alt=\"Underline (Ctrl+U)\" />\r\n                <BlockButton format=\"heading-one\" icon=\"gridicons:heading-h1\" alt=\"Heading 1 (Ctrl+Alt+1)\" />\r\n                <BlockButton format=\"heading-two\" icon=\"gridicons:heading-h2\" alt=\"Heading 2 (Ctrl+Alt+2)\" />\r\n                <BlockButton format=\"heading-three\" icon=\"gridicons:heading-h3\" alt=\"Heading 3 (Ctrl+Alt+3)\" />\r\n                <BlockButton format=\"heading-four\" icon=\"gridicons:heading-h4\" alt=\"Heading 4 (Ctrl+Alt+4)\" />\r\n                <ListButton format=\"bulleted-list\" icon=\"ic:baseline-format-list-bulleted\" alt=\"Bulleted list (Ctrl+.)\" />\r\n                <ListButton format=\"numbered-list\" icon=\"ic:baseline-format-list-numbered\" alt=\"Numbered list (Ctrl+/)\" />\r\n                <FunctionButton fn={indentListItem} icon=\"bx:bx-right-indent\" alt=\"Indent list item (Tab)\" />\r\n                <FunctionButton fn={dedentListItem} icon=\"bx:bx-left-indent\" alt=\"Dedent list item (Shift-Tab)\" />\r\n                <FunctionButton fn={(editor: Editor) => insertTemplateBlock(editor, {})} icon=\"uil:brackets-curly\" alt=\"Insert a template block (type in {{)\" />\r\n                <FunctionButton fn={toClipboardMD} icon=\"ion:copy-outline\" alt=\"Copy to clipboard as plain text (Markdown)\" />\r\n                <FunctionButton fn={toClipboardHTML} icon=\"ion:copy\" alt=\"Copy to clipboard as rich text\" />\r\n                <FunctionButton fn={exportTemplateAsFile} icon=\"bx:bxs-download\" alt=\"Save current template/contents as file\" />\r\n                <FunctionButton fn={loadTemplateFromFile} icon=\"ic:baseline-file-upload\" alt=\"Open a template/document from a file\" />\r\n            </Toolbar>\r\n            <div className=\"editor\">\r\n                <Editable\r\n                    renderElement={renderElement}\r\n                    renderLeaf={renderLeaf}\r\n                    placeholder=\"Enter some text...\"\r\n                    spellCheck\r\n                    autoFocus\r\n                    onKeyDown={e => {\r\n                        console.log(Editor.node(editor, editor.selection))\r\n                        listKeyDown(editor)(e)\r\n                        hotkeyHandler(e, editor)\r\n                    }}\r\n                />\r\n            </div>\r\n        </Slate>\r\n    )\r\n}\r\n","import { Editor, Element as SlateElement } from \"slate\";\r\n\r\nexport const withVoids = (editor: Editor): Editor => {\r\n    const { isInline, isVoid } = editor;\r\n    const voidElementNames = [\"template-block\"]\r\n\r\n    editor.isInline = (element: SlateElement) => {\r\n        let elemType = element.type as string;\r\n        return voidElementNames.includes(elemType) ? true : isInline(element);\r\n    }\r\n\r\n    editor.isVoid = (element: SlateElement) => {\r\n        let elemType = element.type as string;\r\n        return voidElementNames.includes(elemType) ? true : isVoid(element);\r\n    }\r\n    \r\n    return editor;\r\n}","import { Editor } from 'slate';\r\nimport { isHotkey } from 'is-hotkey';\r\n\r\nimport { HOTKEYS, BLOCK_HOTKEYS, FUNCTION_HOTKEYS, LIST_TYPES } from './consts';\r\nimport { toggleMark, toggleBlock } from './utils'\r\nimport { makeListBlock, toggleListBlock } from './lists';\r\n\r\nexport const hotkeyHandler = (event: any, editor: Editor) => {\r\n    for (const hotkey in HOTKEYS) {\r\n        if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const mark = HOTKEYS[hotkey]\r\n            toggleMark(editor, mark)\r\n        }\r\n    }\r\n    for (const hotkey in BLOCK_HOTKEYS) {\r\n        if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const block = BLOCK_HOTKEYS[hotkey]\r\n            // todo: modify this function.\r\n            // if something is toggled to a list but it's just before or after another one,\r\n            // it should be merged with it as a bullet point\r\n            if (LIST_TYPES.includes(block)) {\r\n                switch (block) {\r\n                    case \"bulleted-list\":\r\n                        toggleListBlock(editor)\r\n                        break;\r\n                    case \"numbered-list\":\r\n                        toggleListBlock(editor, \"numbered-list\")\r\n                        break;\r\n                }\r\n            }\r\n            else\r\n                toggleBlock(editor, block)\r\n        }\r\n    }\r\n    for (const hotkey in FUNCTION_HOTKEYS) {\r\n        if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const fn = FUNCTION_HOTKEYS[hotkey]\r\n            fn(editor)\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport \"./css/App.css\"\nimport logo from \"./running.svg\"\n\nimport { RichTextEditor } from './components/RichTextEditor';\n// fastDischarge should also be able to expose API endpoints where it receives parameters for certain values in a template\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          <img src={logo} alt=\"Running man\" style={{height: \"1em\", display: \"inline-block\", transform: \"translateY(6px)\"}} />\n          FastDischarge\n        </h1>\n      </header>\n      <div className=\"editor-container\">\n        <RichTextEditor />\n      </div>\n      <footer>\n        <p>&copy; Christopher Chen 2021-</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}