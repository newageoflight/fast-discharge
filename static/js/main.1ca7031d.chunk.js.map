{"version":3,"sources":["running.svg","editor/lists.ts","editor/templates.ts","editor/consts.ts","editor/utils.ts","editor/seralise.ts","components/TemplateBlock.tsx","context/InitialState.ts","components/utils/Element.tsx","components/utils/Leaf.tsx","components/buttons/MarkButton.tsx","components/buttons/BlockButton.tsx","components/buttons/ListButton.tsx","components/Toolbar.tsx","components/buttons/FunctionButton.tsx","components/utils/Portal.tsx","context/DotAbbrevs.ts","components/HoverMenu.tsx","components/HoverList.tsx","utils/fileHandling.ts","components/RichTextEditor.tsx","wraps/VoidBlocks.ts","editor/handlers.ts","components/HelpModalContents.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditListPlugin","types","typeItem","withEditList","onKeyDown","Editor","Transforms","Element","indentListItem","editor","increaseItemDepth","dedentListItem","decreaseItemDepth","toggleListBlock","type","isSelectionInList","currentList","getCurrentList","selection","console","log","currentListNode","currentListPath","setNodes","at","unwrapList","wrapInList","findNextTemplate","referencePoint","nextTemplateNodeEntry","next","match","node","mode","voids","nextTemplatePath","select","findPreviousTemplate","lastTemplateNodeEntry","previous","lastTemplatePath","HOTKEYS","BLOCK_HOTKEYS","FUNCTION_HOTKEYS","LIST_TYPES","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","n","isEditor","SlateElement","isElement","split","newProperties","block","children","wrapNodes","toggleMark","isMarkActive","removeMark","addMark","nodes","marks","matchBefore","start","beforeOpts","end","rangeEnd","before","beforeRange","range","beforeText","string","beforeMatch","text","toClipboardMD","navigator","clipboard","writeText","preprocessed","map","preprocessMDNode","processor","unified","use","slateToRemark","stringify","bullet","ast","runSync","textLines","tftBlocks","s","join","matchAll","toRemove","tft","matched","index","fPos","val","idx","filter","concat","toMarkdown","then","window","alert","templatesToText","newNode","defaultValue","value","Text","isText","strong","bold","emphasis","italic","depth","ordered","label","toHTML","nodeToHTML","nodeText","escapeHTML","underline","toClipboardHTML","item","Blob","error","TemplateBlock","attributes","element","selected","useSelected","focused","useFocused","useEditor","useState","chosenValue","setChosenValue","opts","options","setOptions","name","setName","editName","setEditName","menuOpen","setMenuOpen","selectRef","useRef","handleChange","useCallback","newValue","actionMeta","changeProps","handleNameChange","evt","newName","target","props","path","ReactEditor","findPath","newProps","defaultStyles","boxShadow","transform","transition","className","contentEditable","style","position","zIndex","placeholder","onInput","e","key","ref","styles","customSelectStyles","theme","customSelectTheme","onChange","onCreateOption","inputValue","newOption","createOption","onMenuOpen","onMenuClose","onClick","tabIndex","icon","insertTemplateBlock","templateBlock","insertNodes","move","control","provided","state","minHeight","height","paddingTop","valueContainer","getValue","currentOption","margin","width","length","selectProps","minWidth","input","indicatorSeparator","display","indicatorsContainer","menu","marginTop","menuIsOpen","option","padding","noOptionsMessage","borderRadius","spacing","baseUnit","InitialState","Leaf","leaf","code","pretemplate","backgroundColor","MarkButton","alt","useSlate","onMouseDown","preventDefault","title","BlockButton","ListButton","checkActive","Toolbar","FunctionButton","fn","Portal","ReactDOM","createPortal","document","body","existingAbbrevs","localStorage","getItem","DotAbbrevsState","atom","default","JSON","parse","HoverMenu","setDotAbbrevs","useSetRecoilState","useEffect","el","current","isFocused","Range","isCollapsed","domSelection","getSelection","domRange","getRangeAt","rect","getBoundingClientRect","opacity","top","pageYOffset","offsetHeight","left","pageXOffset","offsetWidth","removeAttribute","abbrevSetter","newAbbrevs","fragment","fragmentName","prompt","fragmentObject","setItem","saveDotAbbrev","HoverList","React","forwardRef","pos","opt","i","active","SelectItem","downloadFile","fileCreator","fileName","blob","fileDownloadURL","URL","createObjectURL","tempLink","createElement","href","setAttribute","click","remove","uploadSingleFile","uploadHandler","fileSelector","addEventListener","event","files","file","fr","FileReader","RichTextEditor","searchRef","setValue","setTarget","fragmentTarget","setFragmentTarget","setIndex","search","setSearch","useRecoilState","abbrevs","setAbbrevs","insertTemplate","setInsertTemplate","renderElement","renderLeaf","useMemo","withHistory","withReact","isInline","isVoid","voidElementNames","elemType","withVoids","createEditor","searchedAbbrevs","Object","fromEntries","entries","toLowerCase","startsWith","keys","toDOMRange","prevIndex","nextIndex","keyToGet","fragmentToInsert","insertFragment","content","beforeWordRange","beforeWordMatch","edges","wordBefore","unit","wordBeforeMatch","afterMatch","afterOpts","after","afterRange","afterText","matchAfter","distance","beforeTwoCharsRange","readAsText","onload","loaded","result","spellCheck","autoFocus","listKeyDown","hotkey","isHotkey","hotkeyHandler","onSelect","chrome","toDOMPoint","focus","parentElement","scrollIntoView","behavior","HelpModalContents","App","modalOpen","setModalOpen","src","logo","isOpen","onRequestClose","contentLabel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ca7031d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/running.bda043eb.svg\";","import { Editor as SlateEditor, NodeEntry } from \"slate\";\r\nimport { EditListPlugin } from '@productboard/slate-edit-list';\r\n\r\nconst editListOptions = {\r\n    types: [\"bulleted-list\", \"numbered-list\"],\r\n    typeItem: \"list-item\",\r\n}\r\n\r\nexport const [withEditList, onKeyDown, { Editor, Element, Transforms }] = EditListPlugin(editListOptions);\r\n\r\nexport const indentListItem = (editor: SlateEditor): void => {\r\n    Transforms.increaseItemDepth(editor)\r\n}\r\n\r\nexport const dedentListItem = (editor: SlateEditor): void => {\r\n    Transforms.decreaseItemDepth(editor)\r\n}\r\n\r\nexport const makeListBlock = (editor: SlateEditor, type?: string): void => {\r\n    Transforms.wrapInList(editor, type)\r\n}\r\n\r\nexport const unmakeListBlock = (editor: SlateEditor): void => {\r\n    Transforms.unwrapList(editor)\r\n}\r\n\r\nexport const toggleListBlock = (editor: SlateEditor, type?: string): void => {\r\n    const currentlyInList = Editor.isSelectionInList(editor)\r\n    if (!currentlyInList)\r\n        Transforms.wrapInList(editor, type);\r\n    else {\r\n        // check if the current list is of the same type\r\n        let currentList = Editor.getCurrentList(editor, editor.selection) as NodeEntry;\r\n        console.log(currentList);\r\n        let [currentListNode, currentListPath] = currentList;\r\n        // if not, change it to the other type\r\n        if (type && currentListNode.type !== type) {\r\n            Transforms.setNodes(editor, {type}, {at: currentListPath})\r\n        } else {\r\n            Transforms.unwrapList(editor);\r\n        }\r\n    }\r\n}","import { Editor, Node, NodeEntry, Location, Transforms } from 'slate';\r\n\r\n// utility functions for finding and navigating to template blocks in the editor\r\n// actually they kinda work - if you have more than one block present, it will go two blocks back\r\n// however, it will skip over the nearest block for reasons i can't understand at the moment\r\n// also, selecting the template should not just take you to the block but also allow you to select the options\r\n// TODO: fix the selection issues\r\n\r\nexport const findNextTemplate = (editor: Editor, at?: Location): void => {\r\n    let referencePoint = at || editor.selection!\r\n    // let previousPoint = Editor.before(editor, at || editor.selection!, {unit: \"block\"})\r\n    // console.log(previousPoint, editor.children)\r\n    let nextTemplateNodeEntry = (Editor.next(editor, {\r\n        at: referencePoint,\r\n        match: (node: Node) => node.type === \"template-block\",\r\n        mode: 'lowest',\r\n        voids: true\r\n    }) as NodeEntry)\r\n    // console.log(nextTemplateNodeEntry)\r\n    if (!!nextTemplateNodeEntry) {\r\n        let [,nextTemplatePath] = nextTemplateNodeEntry\r\n        Transforms.select(editor, nextTemplatePath);\r\n    }\r\n}\r\n\r\nexport const findPreviousTemplate = (editor: Editor, at?: Location): void => {\r\n    let referencePoint = at || editor.selection!\r\n    // let nextPoint = Editor.after(editor, at || editor.selection!, {unit: \"block\"})\r\n    // console.log(nextPoint, editor.children)\r\n    let lastTemplateNodeEntry = (Editor.previous(editor, {\r\n        at: referencePoint,\r\n        match: (node: Node) => node.type === \"template-block\",\r\n        mode: 'lowest',\r\n        voids: true\r\n    }) as NodeEntry)\r\n    // console.log(lastTemplateNodeEntry)\r\n    if (!!lastTemplateNodeEntry) {\r\n        let [,lastTemplatePath] = lastTemplateNodeEntry\r\n        Transforms.select(editor, lastTemplatePath)\r\n    }\r\n}","import { Editor, Location } from 'slate';\r\nimport { findNextTemplate, findPreviousTemplate } from './templates';\r\n\r\nexport const HOTKEYS: Record<string, string> = {\r\n    'mod+b': 'bold',\r\n    'mod+i': 'italic',\r\n    'mod+u': 'underline',\r\n}\r\n\r\nexport const BLOCK_HOTKEYS: Record<string, string> = {\r\n    'mod+alt+1': 'heading-one',\r\n    'mod+alt+2': 'heading-two',\r\n    'mod+alt+3': 'heading-three',\r\n    'mod+alt+4': 'heading-four',\r\n    'mod+.': 'bulleted-list',\r\n    'mod+/': 'numbered-list',\r\n}\r\n\r\nexport const TEMPLATE_NAV_HOTKEYS: Record<string, (editor: Editor, at?: Location) => void> = {\r\n    'mod+]': findNextTemplate,\r\n    'mod+[': findPreviousTemplate,\r\n}\r\n\r\nexport const FUNCTION_HOTKEYS: Record<string, (editor: Editor) => void> = {\r\n    'mod+]': findNextTemplate,\r\n    'mod+[': findPreviousTemplate,\r\n}\r\n\r\nexport const LIST_TYPES: string[] = ['numbered-list', 'bulleted-list']","import { Editor, Transforms, Element as SlateElement, Point, Range } from 'slate';\r\nimport { LIST_TYPES } from './consts';\r\n\r\ninterface EditorRangeMatch {\r\n    range: Range | undefined;\r\n    text: string | undefined;\r\n    match: \"\" | RegExpMatchArray | null | undefined;\r\n}\r\n\r\nexport const toggleBlock = (editor: Editor, format: string) => {\r\n    const isActive = isBlockActive(editor, format);\r\n    const isList = LIST_TYPES.includes(format)\r\n\r\n    Transforms.unwrapNodes(editor, {\r\n        match: (n) => !Editor.isEditor(n) && SlateElement.isElement(n) && LIST_TYPES.includes(n.type as string),\r\n        split: true\r\n    })\r\n\r\n    const newProperties: Partial<SlateElement> = {\r\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\r\n    }\r\n    Transforms.setNodes(editor, newProperties)\r\n    \r\n    if (!isActive && isList) {\r\n        const block = { type: format, children: [] }\r\n        Transforms.wrapNodes(editor, block)\r\n    }\r\n}\r\n\r\nexport const toggleMark = (editor: Editor, format: string) => {\r\n    const isActive = isMarkActive(editor, format)\r\n\r\n    if (isActive)\r\n        Editor.removeMark(editor, format)\r\n    else\r\n        Editor.addMark(editor, format, true)\r\n}\r\n\r\nexport const isBlockActive = (editor: Editor, format: string) => {\r\n    const [match] = Editor.nodes(editor, {\r\n        match: n => !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\r\n    })\r\n        \r\n    return !!match\r\n}\r\n\r\nexport const isMarkActive = (editor: Editor, format: string) => {\r\n    const marks = Editor.marks(editor);\r\n    return marks ? marks[format] === true : false\r\n}\r\n\r\nexport const matchBefore = (editor: Editor, start: Point, match: RegExp, beforeOpts?: any, end?: Point): EditorRangeMatch => {\r\n    const rangeEnd = end || start;\r\n    const before = Editor.before(editor, start, beforeOpts)\r\n    const beforeRange = before && Editor.range(editor, before, rangeEnd);\r\n    const beforeText = beforeRange && Editor.string(editor, beforeRange);\r\n    const beforeMatch = beforeText && beforeText.match(match);\r\n    return {range: beforeRange, text: beforeText, match: beforeMatch};\r\n}\r\n\r\nexport const matchAfter = (editor: Editor, start: Point, match: RegExp, afterOpts?: any): EditorRangeMatch => {\r\n    const after = Editor.after(editor, start, afterOpts);\r\n    const afterRange = Editor.range(editor, start, after);\r\n    const afterText = Editor.string(editor, afterRange);\r\n    const afterMatch = afterText.match(match);\r\n    return {range: afterRange, text: afterText, match: afterMatch};\r\n}","import { Editor, Node, Text } from 'slate';\r\nimport unified from 'unified';\r\nimport { slateToRemark } from 'remark-slate-transformer';\r\nimport stringify from 'remark-stringify';\r\nimport escapeHTML from \"escape-html\";\r\nimport * as clipboard from \"clipboard-polyfill\";\r\n\r\n// two packages seem to work to this end:\r\n// https://github.com/accordproject/markdown-transform/tree/master/packages/markdown-slate/\r\n// https://github.com/inokawa/remark-slate-transformer\r\n\r\nexport const toMarkdown = (editor: Editor): string => {\r\n    const preprocessed = editor.children.map(preprocessMDNode)\r\n    const processor = unified().use(slateToRemark).use(stringify, {bullet: \"-\"})\r\n    const ast = processor.runSync({\r\n        type: \"root\",\r\n        children: preprocessed,\r\n    });\r\n    const text = processor.stringify(ast);\r\n    // i can't figure out how to remove the unnecessary line breaks in the lists using remark's serialiser\r\n    // so i'm going to do it the stupid way using regex\r\n    let textLines = text.split(\"\\n\")\r\n    // convert to a boolean index of where there are list items or not\r\n    // this will miss empty list items - the serialiser only introduces the spaces after the bullet point when there is content in the item\r\n    let matches = textLines.map(s => !!s.match(/^\\s*(-|\\d+\\.)\\s+/g))\r\n    // look for a true/false/true block\r\n    // it's easier if you just convert it to a string and use regex but again this feels very dumb to me for some reason\r\n    let matchString = matches.map(s => s ? 't' : 'f').join('')\r\n    let tftBlocks = matchString.matchAll(/t(ft)+/g)\r\n    let toRemove: number[] = []\r\n    for (let tft of tftBlocks) {\r\n        let [matched] = tft;\r\n        let { index } = tft;\r\n        // i wish there was a way to do this without the filter or the spread operator but js is dumb\r\n        let fPos = [...matched].map((val, idx) => (val === 'f') ? (index!+idx) : -1).filter(val => (val >= 0))\r\n        toRemove = toRemove.concat(fPos)\r\n    }\r\n    let finalLines = textLines.map((val, idx) => (!toRemove.includes(idx)) ? val : null).filter(val => val !== null)\r\n    let fixedText = finalLines.join('\\n')\r\n\r\n    return fixedText;\r\n}\r\n\r\nexport const toClipboardMD = (editor: Editor): void => {\r\n    navigator.clipboard.writeText(toMarkdown(editor)).then(() => {\r\n        window.alert(\"Copied successfully!\")\r\n    }, () => {\r\n        window.alert(\"Copying failed!\")\r\n    })\r\n}\r\n\r\nconst templatesToText = (node: Node): Node => {\r\n    let newNode = {...node};\r\n\r\n    if (newNode.children)\r\n        newNode.children = (newNode.children as Node[]).map(templatesToText)\r\n\r\n    switch (newNode.type) {\r\n        case \"template-block\":\r\n            return {text: (newNode.defaultValue ? (newNode.defaultValue as {label:string,value:string}).value : \"\")}\r\n        default:\r\n            return newNode\r\n    }\r\n}\r\n\r\nconst preprocessMDNode = (node: Node): Node => {\r\n    let newNode = {...node};\r\n    // preprocess text nodes so that they return the right formatting\r\n    if (Text.isText(newNode)) {\r\n        newNode.strong = newNode.bold\r\n        newNode.emphasis = newNode.italic\r\n    }\r\n\r\n    if (newNode.children)\r\n        newNode.children = (newNode.children as Node[]).map(preprocessMDNode)\r\n\r\n    switch (newNode.type) {\r\n        case \"heading-one\":\r\n            return {...newNode, type: \"heading\", depth: 1}\r\n        case \"heading-two\":\r\n            return {...newNode, type: \"heading\", depth: 2}\r\n        case \"heading-three\":\r\n            return {...newNode, type: \"heading\", depth: 3}\r\n        case \"heading-four\":\r\n            return {...newNode, type: \"heading\", depth: 4}\r\n        case \"numbered-list\":\r\n            return {...newNode, type: \"list\", ordered: true}\r\n        case \"bulleted-list\":\r\n            return {...newNode, type: \"list\", ordered: false}\r\n        case \"list-item\":\r\n            return {...newNode, type: \"listItem\"}\r\n        case \"template-block\":\r\n            return {text: (newNode.defaultValue ? (newNode.defaultValue as {label:string,value:string}).label : \"\")}\r\n        default:\r\n            return newNode\r\n    }\r\n}\r\n\r\nexport const toHTML = (editor: Editor): string => {\r\n    const preprocessed = editor.children.map(templatesToText)\r\n    return preprocessed.map(nodeToHTML).join('')\r\n}\r\n\r\nconst nodeToHTML = (node: Node): string => {\r\n    if (Text.isText(node)) {\r\n        let nodeText = escapeHTML(node.text)\r\n        \r\n        if (node.bold)\r\n            nodeText = `<strong>${nodeText}</strong>`\r\n\r\n        if (node.italic)\r\n            nodeText = `<em>${nodeText}</em>`\r\n\r\n        if (node.underline)\r\n            nodeText = `<u>${nodeText}</u>`\r\n        \r\n        return nodeText\r\n    }\r\n    \r\n    const children = node.children.map((n: Node) => nodeToHTML(n)).join('')\r\n\r\n    switch (node.type) {\r\n        case \"heading-one\":\r\n            return `<h1>${children}</h1>`\r\n        case \"heading-two\":\r\n            return `<h2>${children}</h2>`\r\n        case \"heading-three\":\r\n            return `<h3>${children}</h3>`\r\n        case \"heading-four\":\r\n            return `<h4>${children}</h4>`\r\n        case \"bulleted-list\":\r\n            return `<ul>${children}</ul>`\r\n        case \"numbered-list\":\r\n            return `<ol>${children}</ol>`\r\n        case \"list-item\":\r\n            return `<li>${children}</li>`\r\n        default:\r\n            return children\r\n    }\r\n}\r\n\r\nexport const toClipboardHTML = (editor: Editor): void => {\r\n    // can't use the new async clipboard API because it doesn't support rich text\r\n    // i normally try to avoid installing packages if i can help it but anyway, here we are\r\n    const item = new clipboard.ClipboardItem({\r\n        \"text/html\": new Blob([toHTML(editor)], {type: \"text/html\"}),\r\n    })\r\n    try {\r\n        clipboard.write([item]);\r\n        window.alert(\"Copied successfully!\")\r\n    } catch (error) {\r\n        window.alert(\"Copying failed!\")\r\n    }\r\n}","import React, { useCallback, useRef, useState } from 'react'\r\nimport { Editor, Transforms } from 'slate';\r\nimport { RenderElementProps, ReactEditor, useFocused, useSelected, useEditor } from 'slate-react'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport { InlineIcon } from '@iconify/react-with-api';\r\nimport { ValueType } from 'react-select';\r\nimport AutoSizeInput from \"react-input-autosize\";\r\n\r\ninterface TemplateBlockProps {\r\n    name?: string;\r\n    templateType?: \"void\" | \"date\" | \"list\" | \"multilist\" | \"ref\" | \"expr\";\r\n    opts?: {label:string, value:string}[];\r\n    defaultValue?: {label:string,value:string};\r\n}\r\n\r\n// TODO: add the ability to set the options while the template block is focused/selected\r\nexport const TemplateBlock: React.FC<RenderElementProps> = ({ attributes, children, element }) => {\r\n    const selected = useSelected();\r\n    const focused = useFocused();\r\n    const editor = useEditor();\r\n\r\n    // this next line looks ugly af but i'm not sure how else to do it\r\n    const [chosenValue, setChosenValue] = useState<ValueType<{label:string, value:string},false>>(element.defaultValue ? (element.defaultValue as {label:string,value:string}) : null as ValueType<{label:string,value:string}, false>);\r\n    const [options, setOptions] = useState<{label:string,value:string}[]>(element.opts ? element.opts as {label:string, value:string}[] : [])\r\n    const [name, setName] = useState<string>(element.name as string);\r\n    const [editName, setEditName] = useState(false);\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    \r\n    // probably shouldn't be using \"any\" as the type here but idk what else to do lol\r\n    const selectRef = useRef<any>(null);\r\n    // const elementRef = useRef<HTMLSpanElement>(null);\r\n    // const editorSelection = useRef<any>(editor.selection);\r\n    // const [selectActive, setSelectActive] = useState(false);\r\n\r\n    const handleChange = useCallback((newValue: any, actionMeta: any) => {\r\n        setChosenValue(newValue);\r\n        changeProps({defaultValue: newValue})\r\n        // eslint-disable-next-line\r\n    }, [setChosenValue])\r\n    \r\n    const handleCreate = (inputValue: any) => {\r\n        const newOption = createOption(inputValue);\r\n        setOptions([...options, newOption])\r\n        setChosenValue(newOption);\r\n        changeProps({opts: [...options, newOption], defaultValue: newOption})\r\n    }\r\n    \r\n    const handleNameChange = useCallback((evt: React.FormEvent) => {\r\n        let newName = (evt.target as HTMLInputElement).value\r\n        setName(newName);\r\n        changeProps({name: newName})\r\n        // eslint-disable-next-line\r\n    }, [setName])\r\n    \r\n    const changeProps = useCallback((props: TemplateBlockProps) => {\r\n        let path = ReactEditor.findPath(editor, element)\r\n        let newProps = {...props}\r\n        Transforms.setNodes(editor, newProps, {at:path})\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    \r\n    // this fix using the onmenuclose and onmenuopen hooks seems to work, but i'm not sure how safe it is\r\n    const defaultStyles: React.CSSProperties = {\r\n        boxShadow: selected && focused ? '0 0 0 2px #b4d5ff' : 'none',\r\n        transform: `translateY(${editName ? 0 : 2}px)`,\r\n        transition: \"0.3s ease all\"\r\n    }\r\n\r\n    const focusedStyles: React.CSSProperties = {\r\n        position: \"relative\",\r\n        zIndex: 99\r\n    }\r\n\r\n    return (\r\n        <span {...attributes}\r\n            className=\"template-block\"\r\n            contentEditable={false}\r\n            style={menuOpen ? {...defaultStyles, ...focusedStyles} : defaultStyles}>\r\n            {editName ?\r\n            (\r\n                <div className=\"content\">\r\n                    <AutoSizeInput placeholder=\"Name this field...\" value={name} onInput={handleNameChange} onKeyDown={e => e.key === \"Enter\" && setEditName(!editName)} />\r\n                </div>\r\n            )\r\n            : (<CreatableSelect\r\n                    ref={selectRef}\r\n                    styles={customSelectStyles} theme={customSelectTheme}\r\n                    placeholder={name}\r\n                    onChange={handleChange} onCreateOption={handleCreate}\r\n                    onMenuOpen={() => setMenuOpen(true)} onMenuClose={() => setMenuOpen(false)}\r\n                    value={chosenValue} options={options} />)}\r\n            <button className=\"name-setter\"\r\n                onClick={() => {\r\n                    setEditName(!editName)\r\n                }}\r\n                tabIndex={-1}\r\n            ><InlineIcon icon=\"bi:gear-fill\" /></button>\r\n            {children}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const insertTemplateBlock = (editor: Editor, props: TemplateBlockProps) => {\r\n    const templateBlock = { type: \"template-block\", children: [{text: ''}], ...props }\r\n    Transforms.insertNodes(editor, templateBlock);\r\n    Transforms.move(editor);\r\n}\r\n\r\nconst createOption = (label: string) => ({\r\n    label,\r\n    value: label\r\n})\r\n\r\n// auto width: https://stackoverflow.com/questions/46571811/react-select-auto-size-width\r\n// modify height: https://stackoverflow.com/questions/54218351/changing-height-of-react-select-component\r\nconst customSelectStyles = {\r\n    control: (provided: any, state: any) => ({\r\n        ...provided,\r\n        minHeight: \"1.4em\",\r\n        height: \"1.4em\",\r\n        paddingTop: \"1px\",\r\n    }),\r\n    valueContainer: (provided: any, state: any) => {\r\n        let [currentOption] = state.getValue();\r\n        return ({\r\n            ...provided,\r\n            margin: \"0 0 0 4px\",\r\n            transform: \"translateY(-2px)\",\r\n            width: `${(currentOption ? currentOption.label.length : state.selectProps.placeholder ? state.selectProps.placeholder.length : 5) + 2}ex`,\r\n            minWidth: \"5ex\",\r\n        })\r\n    },\r\n    input: (provided: any, state: any) => ({\r\n        ...provided,\r\n        margin: \"0px\",\r\n    }),\r\n    indicatorSeparator: (state: any) => ({\r\n        display: 'none',\r\n    }),\r\n    indicatorsContainer: (provided: any, state: any) => ({\r\n        ...provided,\r\n        height: '1.4em',\r\n        transform: \"translateY(-2px)\"\r\n    }),\r\n    menu: (provided: any, state: any) => ({\r\n        ...provided,\r\n        marginTop: 0,\r\n        zIndex: `${state.selectProps.menuIsOpen ? 999 : \"inherit\"}`\r\n    }),\r\n    option: (provided: any) => ({\r\n        ...provided,\r\n        padding: \"5px\",\r\n    }),\r\n    noOptionsMessage: (provided: any) => ({\r\n        ...provided,\r\n        padding: \"5px 0\",\r\n    }),\r\n}\r\n\r\nconst customSelectTheme = (theme: any) => ({\r\n    ...theme,\r\n    borderRadius: 0,\r\n    spacing: {\r\n        ...theme.spacing,\r\n        baseUnit: 0,\r\n    },\r\n})","export const InitialState = [\r\n    {\r\n        type: \"paragraph\",\r\n        children: [\r\n            {text: \"Type in {{ to create a template block like this (the gear icon allows you to name the field): \"},\r\n            {\r\n                type: \"template-block\",\r\n                name: \"sex\", \r\n                opts: [{label: \"male\", value: \"male\"}, {label: \"female\", value: \"female\"}],\r\n                defaultValue: {label: 'male', value: 'male'},\r\n                children: [{text: ''}],\r\n            },\r\n            {text: ''},\r\n        ]\r\n    },\r\n    {\r\n        type: \"paragraph\",\r\n        children: [\r\n            {text: \"FastDischarge also comes with all the rich text editing features you know and love!\"}\r\n        ]\r\n    },\r\n]","import React from 'react'\r\nimport { RenderElementProps } from \"slate-react\";\r\nimport { TemplateBlock } from '../TemplateBlock';\r\n\r\nexport const Element: React.FC<RenderElementProps> = ({ attributes, children, element }) => {\r\n    switch (element.type) {\r\n        case 'bulleted-list':\r\n            return <ul {...attributes}>{children}</ul>\r\n        case 'numbered-list':\r\n            return <ol {...attributes}>{children}</ol>\r\n        case 'heading-one':\r\n            return <h1 {...attributes}>{children}</h1>\r\n        case 'heading-two':\r\n            return <h2 {...attributes}>{children}</h2>\r\n        case 'heading-three':\r\n            return <h3 {...attributes}>{children}</h3>\r\n        case 'heading-four':\r\n            return <h4 {...attributes}>{children}</h4>\r\n        case 'list-item':\r\n            return <li {...attributes}>{children}</li>\r\n        case 'template-block':\r\n            return <TemplateBlock attributes={attributes} children={children} element={element} />\r\n        default:\r\n            return <p {...attributes}>{children}</p>\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { RenderLeafProps } from 'slate-react'\r\n\r\nexport const Leaf: React.FC<RenderLeafProps> = ({ attributes, children, leaf }) => {\r\n    if (leaf.bold)\r\n        children = <strong>{children}</strong>\r\n        \r\n    if (leaf.code)\r\n        children = <code>{children}</code>\r\n\r\n    if (leaf.italic)\r\n        children = <em>{children}</em>\r\n\r\n    if (leaf.underline)\r\n        children = <u>{children}</u>\r\n        \r\n    if (leaf.pretemplate)\r\n        children = <span style={{borderRadius: \"5px\", backgroundColor: \"#ddd\"}}>{children}</span>\r\n        \r\n    return <span {...attributes}>{children}</span>\r\n}\r\n","import React from 'react';\r\nimport { InlineIcon } from \"@iconify/react-with-api\";\r\nimport { useSlate } from 'slate-react';\r\nimport { isMarkActive, toggleMark } from '../../editor/utils';\r\n\r\ninterface Props {\r\n    format: string;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const MarkButton: React.FC<Props> = ({ format, icon, alt }) => {\r\n    const editor = useSlate();\r\n    const isActive = isMarkActive(editor, format);\r\n\r\n    return (\r\n        <li>\r\n            <button className={isActive ? \"active\" : \"\"}\r\n                onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                toggleMark(editor, format)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { InlineIcon } from \"@iconify/react-with-api\";\r\nimport { useSlate } from 'slate-react';\r\nimport { toggleBlock, isBlockActive } from '../../editor/utils';\r\n\r\ninterface Props {\r\n    format: string;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const BlockButton: React.FC<Props> = ({ format, icon, alt }) => {\r\n    const editor = useSlate();\r\n    const isActive = isBlockActive(editor, format);\r\n\r\n    return (\r\n        <li>\r\n            <button className={isActive ? \"active\" : \"\"}\r\n                onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                toggleBlock(editor, format)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { InlineIcon } from \"@iconify/react-with-api\";\r\nimport { Editor as SlateEditor } from \"slate\";\r\nimport { useSlate } from 'slate-react';\r\nimport { Editor, toggleListBlock } from '../../editor/lists';\r\n\r\ninterface Props {\r\n    format: string;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const ListButton: React.FC<Props> = ({ format, icon, alt }) => {\r\n    const editor = useSlate();\r\n    const isActive = checkActive(editor, format);\r\n\r\n    return (\r\n        <li>\r\n            <button className={isActive ? \"active\" : \"\"}\r\n                onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                toggleListBlock(editor, format)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nconst checkActive = (editor: SlateEditor, format: string) => {\r\n    const currentList = Editor.getCurrentList(editor);\r\n    if (currentList) {\r\n        const [listNode] = currentList;\r\n        return listNode.type === format;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const Toolbar: React.FC = ({ children }) => {\r\n    return (\r\n        <div className=\"toolbar-container\">\r\n            <ul>\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { InlineIcon } from '@iconify/react-with-api';\r\nimport { Editor } from 'slate'\r\nimport { useSlate } from 'slate-react';\r\n\r\ninterface Props {\r\n    fn: (editor: Editor) => void;\r\n    icon: string;\r\n    alt?: string;\r\n}\r\n\r\nexport const FunctionButton: React.FC<Props> = ({fn, icon, alt}) => {\r\n    const editor = useSlate();\r\n    \r\n    return (\r\n        <li>\r\n            <button onMouseDown={evt => {\r\n                evt.preventDefault();\r\n                fn(editor)\r\n            }} title={alt}>\r\n                <InlineIcon icon={icon} />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport const Portal: React.FC = ({ children }) => {\r\n    return ReactDOM.createPortal(children, document.body);\r\n}\r\n","import { atom } from \"recoil\";\r\nimport { Descendant } from \"slate\";\r\n\r\nconst existingAbbrevs = localStorage.getItem(\"dotAbbrevs\")\r\n\r\nexport const DotAbbrevsState = atom({\r\n    key: \"DotAbbreviations\",\r\n    default: existingAbbrevs ? (JSON.parse(existingAbbrevs) as Record<string, Descendant[]>) : ({} as Record<string, Descendant[]>)\r\n})","import React, { useEffect, useRef } from 'react'\r\nimport { Descendant, Editor, Range } from 'slate';\r\nimport { ReactEditor, useSlate } from 'slate-react';\r\nimport { Portal } from './utils/Portal';\r\nimport { FunctionButton } from './buttons/FunctionButton';\r\nimport { SetterOrUpdater, useSetRecoilState } from 'recoil';\r\nimport { DotAbbrevsState } from './../context/DotAbbrevs';\r\n\r\n// based on this example:\r\n// https://github.com/ianstormtaylor/slate/blob/master/site/examples/hovering-toolbar.tsx\r\n\r\n// this menu should give users the ability to select a chunk of text to save as a dot abbreviation\r\n\r\nexport const HoverMenu: React.FC = () => {\r\n    const ref = useRef<HTMLDivElement | null>(null);\r\n    const editor = useSlate();\r\n    const setDotAbbrevs = useSetRecoilState(DotAbbrevsState);\r\n\r\n    useEffect(() => {\r\n        const el = ref.current;\r\n        const { selection } = editor;\r\n\r\n        if (!el) {\r\n            return;\r\n        }\r\n\r\n        if (!selection || !ReactEditor.isFocused(editor) || Range.isCollapsed(selection) || Editor.string(editor, selection) === \"\") {\r\n            el.removeAttribute('style');\r\n            return;\r\n        }\r\n\r\n        const domSelection = window.getSelection();\r\n        const domRange = domSelection?.getRangeAt(0);\r\n        const rect = domRange?.getBoundingClientRect();\r\n\r\n        el.style.opacity = '1';\r\n        el.style.top = `${rect!.top + window.pageYOffset - el.offsetHeight}px`;\r\n        el.style.left = `${rect!.left + window.pageXOffset - el.offsetWidth/2 + 15}px`;\r\n    })\r\n\r\n    return (\r\n        <Portal>\r\n            <div className=\"hovering-menubar\" ref={ref}>\r\n                <ul>\r\n                    <FunctionButton fn={() => saveDotAbbrev(editor, setDotAbbrevs)} icon=\"bi:dot\" alt=\"Save as a dot abbreviation\" />\r\n                </ul>\r\n            </div>\r\n        </Portal>\r\n    )\r\n}\r\n\r\nfunction saveDotAbbrev(editor: Editor, abbrevSetter: SetterOrUpdater<any>) {\r\n    const { selection } = editor;\r\n    const existingAbbrevs = localStorage.getItem(\"dotAbbrevs\") && JSON.parse(localStorage.getItem(\"dotAbbrevs\")!)\r\n    // get the fragment\r\n    let fragment = Editor.fragment(editor, selection!)\r\n    // first a dialogue should pop up asking the user to name the fragment\r\n    let fragmentName = window.prompt(\"Name this fragment: \")\r\n    let fragmentObject: Record<string,Descendant[]> = {}\r\n    fragmentObject[fragmentName!] = fragment;\r\n    let newAbbrevs;\r\n    if (existingAbbrevs) {\r\n        newAbbrevs = {...existingAbbrevs, ...fragmentObject}\r\n    } else {\r\n        newAbbrevs = {...fragmentObject}\r\n    }\r\n    abbrevSetter(newAbbrevs);\r\n    localStorage.setItem(\"dotAbbrevs\", JSON.stringify(newAbbrevs))\r\n}","import React from 'react'\r\nimport { Portal } from './utils/Portal';\r\n\r\n// based on this example:\r\n// https://github.com/ianstormtaylor/slate/blob/master/site/examples/mentions.tsx\r\n\r\n// this will mainly be used for dot abbreviation expansion\r\n\r\ninterface Props {\r\n    opts: string[];\r\n    pos: number;\r\n}\r\n\r\ninterface SelectItemProps {\r\n    key: any;\r\n    active: boolean;\r\n}\r\n\r\nexport const HoverList = React.forwardRef<HTMLDivElement, Props>(({ opts, pos }: Props, ref) => {\r\n    return (\r\n        <Portal>\r\n            <div className=\"abbreviation-selector\" ref={ref}>\r\n                {opts.map((opt, i) => (\r\n                    <SelectItem key={opt} active={pos === i}>\r\n                        {opt}\r\n                    </SelectItem>\r\n                ))\r\n                }\r\n            </div>\r\n        </Portal>\r\n    )\r\n})\r\n\r\n// The point of making this a separate component is that hopefully it'll be able to support onClick events\r\nconst SelectItem: React.FC<SelectItemProps> = ({ active, children }) => {\r\n    return (\r\n        <div className={`selector-item ${active ? \"active-item\" : \"\"}`}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport function downloadFile(fileCreator: Blob | (() => Blob), fileName: string): void {\r\n    const blob = (typeof fileCreator === \"function\") ? fileCreator() : fileCreator;\r\n    const fileDownloadURL = URL.createObjectURL(blob);\r\n    let tempLink = document.createElement(\"a\")\r\n    tempLink.href = fileDownloadURL;\r\n    tempLink.setAttribute(\"download\", fileName)\r\n    tempLink.setAttribute(\"target\", \"_blank\")\r\n    tempLink.click()\r\n    tempLink.remove()\r\n}\r\n\r\nexport function uploadSingleFile(uploadHandler: (file: File, fr: FileReader) => void): void {\r\n    const fileSelector = document.createElement(\"input\");\r\n    fileSelector.setAttribute(\"type\", \"file\")\r\n    fileSelector.click()\r\n    fileSelector.addEventListener(\"change\", event => {\r\n        if (fileSelector.files && fileSelector.files.length >= 1) {\r\n            let file = fileSelector.files![0], fr = new FileReader();\r\n            uploadHandler(file, fr)\r\n        }\r\n    })\r\n}","import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Editable, withReact, Slate, ReactEditor } from \"slate-react\";\r\nimport { createEditor, Editor, Location, Node, Range, Transforms } from \"slate\";\r\nimport { withHistory } from \"slate-history\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport \"simplebar/dist/simplebar.min.css\"\r\n\r\nimport { withEditList, onKeyDown as listKeyDown, indentListItem, dedentListItem } from \"./../editor/lists\"\r\nimport { hotkeyHandler } from '../editor/handlers'\r\nimport { toClipboardHTML, toClipboardMD } from \"../editor/seralise\";\r\nimport { withVoids } from './../wraps/VoidBlocks';\r\nimport { insertTemplateBlock } from \"./TemplateBlock\";\r\nimport { InitialState } from \"./../context/InitialState\";\r\n\r\nimport { Element } from './utils/Element';\r\nimport { Leaf } from './utils/Leaf';\r\nimport { MarkButton } from \"./buttons/MarkButton\";\r\nimport { BlockButton } from \"./buttons/BlockButton\";\r\nimport { ListButton } from \"./buttons/ListButton\";\r\nimport { Toolbar } from './Toolbar'\r\nimport { FunctionButton } from \"./buttons/FunctionButton\";\r\nimport { HoverMenu } from \"./HoverMenu\";\r\nimport { matchAfter, matchBefore } from './../editor/utils';\r\nimport { DotAbbrevsState } from './../context/DotAbbrevs';\r\nimport { HoverList } from './HoverList';\r\nimport { downloadFile, uploadSingleFile } from './../utils/fileHandling';\r\n\r\nexport const RichTextEditor: React.FC = () => {\r\n    const searchRef = useRef<HTMLDivElement | null>(null);\r\n    const [value, setValue] = useState<Node[]>(JSON.parse((localStorage.getItem(\"content\") as string)) || InitialState);\r\n    const [target, setTarget] = useState<Range | null>();\r\n    const [fragmentTarget, setFragmentTarget] = useState<Range | null>();\r\n    const [index, setIndex] = useState(0);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [abbrevs, setAbbrevs] = useRecoilState(DotAbbrevsState);\r\n    const [insertTemplate, setInsertTemplate] = useState(false);\r\n    const renderElement = useCallback(props => <Element {...props} />, [])\r\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n\r\n    const editor = useMemo(() => withHistory(withReact(withEditList(withVoids(createEditor())))), [])\r\n    \r\n    const searchedAbbrevs = Object.fromEntries(Object.entries(abbrevs).filter(([key]) => \r\n        (search !== \"$\") ? key.toLowerCase().startsWith(search.toLowerCase()) : !!key\r\n    ));\r\n\r\n    // useEffect hook for inserting template tags\r\n    useEffect(() => {\r\n        if (!!target && insertTemplate) {\r\n            Transforms.select(editor, target!);\r\n            insertTemplateBlock(editor, {})\r\n            setInsertTemplate(false);\r\n            setTarget(null);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [insertTemplate])\r\n    \r\n    // useEffect hook for fragment insertion dropdowns\r\n    useEffect(() => {\r\n        if (fragmentTarget && Object.keys(searchedAbbrevs).length > 0) {\r\n            // console.log(\"Dotabbrev searcher should display\")\r\n            // console.log(search, searchedAbbrevs)\r\n            const el = searchRef.current;\r\n            const domRange = ReactEditor.toDOMRange(editor, fragmentTarget);\r\n            const rect = domRange.getBoundingClientRect();\r\n            el!.style.top = `${rect.top + window.pageYOffset + 24}px`\r\n            el!.style.left = `${rect.left + window.pageXOffset}px`\r\n        }\r\n    }, [searchedAbbrevs, editor, index, search, fragmentTarget])\r\n    \r\n    const exportTemplateAsFile = () => downloadFile(new Blob([JSON.stringify(editor.children)], {type: \"application/json\"}), \"template.fdt\")\r\n    \r\n    const exportAbbrevsAsFile = () => downloadFile(new Blob([JSON.stringify(abbrevs)], {type: \"application/json\"}), \"abbreviations.fda\")\r\n\r\n    const loadTemplateFromFile = () => uploadSingleFile((file, fr) => {\r\n        fr.readAsText(file);\r\n        fr.onload = event => {\r\n            let loaded = JSON.parse((event.target!.result as string));\r\n            setValue(loaded);\r\n        }\r\n    })\r\n    \r\n    const loadAbbrevsFromFile = () => uploadSingleFile((file, fr) => {\r\n        fr.readAsText(file);\r\n        fr.onload = event => {\r\n            let loaded = JSON.parse((event.target!.result as string));\r\n            setAbbrevs(loaded);\r\n        }\r\n    })\r\n    \r\n    // fragment insertion keydown handler\r\n    const onKeyDown = useCallback(\r\n        (event: React.KeyboardEvent) => {\r\n            if (fragmentTarget) {\r\n                switch (event.key) {\r\n                    case \"ArrowDown\":\r\n                        event.preventDefault();\r\n                        const prevIndex = index >= Object.keys(searchedAbbrevs).length - 1 ? 0 : index + 1\r\n                        setIndex(prevIndex);\r\n                        break;\r\n                    case \"ArrowUp\":\r\n                        event.preventDefault();\r\n                        const nextIndex = index <= 0 ? Object.keys(searchedAbbrevs).length - 1 : index - 1\r\n                        setIndex(nextIndex);\r\n                        break;\r\n                    case \"Tab\":\r\n                    case \"Enter\":\r\n                        event.preventDefault();\r\n                        Transforms.select(editor, (fragmentTarget as Location));\r\n                        let keyToGet = Object.keys(searchedAbbrevs)[index]\r\n                        let fragmentToInsert = abbrevs[keyToGet]\r\n                        Editor.insertFragment(editor, fragmentToInsert);\r\n                        setFragmentTarget(null);\r\n                        break;\r\n                    case \"Escape\":\r\n                        event.preventDefault();\r\n                        setFragmentTarget(null);\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n        [index, search, fragmentTarget],\r\n    )\r\n    \r\n    return (\r\n        <Slate editor={editor} value={value} onChange={value => {\r\n            setValue(value);\r\n            const content = JSON.stringify(value);\r\n            localStorage.setItem(\"content\", content)\r\n            // console.log(value)\r\n\r\n            // you should be able to replace this code block with this addon:\r\n            // https://github.com/ianstormtaylor/slate-plugins/tree/master/packages/slate-auto-replace\r\n            const { selection } = editor;\r\n            // if nothing is currently selected under the cursor\r\n            if (selection && Range.isCollapsed(selection)) {\r\n                const [start] = Range.edges(selection);\r\n                // if the two characters beforce the cursor are {{, select them and replace with a template block\r\n                const wordBefore = Editor.before(editor, start, {unit: \"word\"})\r\n                const wordBeforeMatch = wordBefore && matchBefore(editor, wordBefore, /^\\.(\\w+|\\$)$/, {}, start)\r\n                let beforeWordRange, beforeWordText, beforeWordMatch;\r\n                if (wordBeforeMatch) {\r\n                    beforeWordRange = wordBeforeMatch.range;\r\n                    beforeWordText = wordBeforeMatch.text;\r\n                    beforeWordMatch = wordBeforeMatch.match;\r\n                }\r\n                // let {range: beforeWordRange, text: beforeWordText, match: beforeWordMatch} = wordBeforeMatch;\r\n                const {match: afterMatch} = matchAfter(editor, start, /^(\\s|$)/)\r\n                const {range: beforeTwoCharsRange, match: beforeTwoCharsMatch} = matchBefore(editor, start, /\\{\\{/, {distance: 2})\r\n                // console.log(beforeWordMatch, beforeWordText, beforeWordRange)\r\n                if (beforeTwoCharsMatch) {\r\n                    setTarget(beforeTwoCharsRange);\r\n                    setInsertTemplate(true);\r\n                }\r\n                if (beforeWordMatch && afterMatch) {\r\n                    setFragmentTarget(beforeWordRange)\r\n                    setSearch(beforeWordMatch[1]);\r\n                    setIndex(0);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            setFragmentTarget(null);\r\n        }}>\r\n            <Toolbar>\r\n                <MarkButton format=\"bold\" icon=\"gridicons:bold\" alt=\"Bold (Ctrl+B)\" />\r\n                <MarkButton format=\"italic\" icon=\"gridicons:italic\" alt=\"Italic (Ctrl+I)\" />\r\n                <MarkButton format=\"underline\" icon=\"gridicons:underline\" alt=\"Underline (Ctrl+U)\" />\r\n                <BlockButton format=\"heading-one\" icon=\"gridicons:heading-h1\" alt=\"Heading 1 (Ctrl+Alt+1)\" />\r\n                <BlockButton format=\"heading-two\" icon=\"gridicons:heading-h2\" alt=\"Heading 2 (Ctrl+Alt+2)\" />\r\n                <BlockButton format=\"heading-three\" icon=\"gridicons:heading-h3\" alt=\"Heading 3 (Ctrl+Alt+3)\" />\r\n                <BlockButton format=\"heading-four\" icon=\"gridicons:heading-h4\" alt=\"Heading 4 (Ctrl+Alt+4)\" />\r\n                <ListButton format=\"bulleted-list\" icon=\"ic:baseline-format-list-bulleted\" alt=\"Bulleted list (Ctrl+.)\" />\r\n                <ListButton format=\"numbered-list\" icon=\"ic:baseline-format-list-numbered\" alt=\"Numbered list (Ctrl+/)\" />\r\n                <FunctionButton fn={indentListItem} icon=\"bx:bx-right-indent\" alt=\"Indent list item (Tab)\" />\r\n                <FunctionButton fn={dedentListItem} icon=\"bx:bx-left-indent\" alt=\"Dedent list item (Shift-Tab)\" />\r\n                <FunctionButton fn={(editor: Editor) => insertTemplateBlock(editor, {})} icon=\"uil:brackets-curly\" alt=\"Insert a template block (type in {{)\" />\r\n                <FunctionButton fn={toClipboardMD} icon=\"ion:copy-outline\" alt=\"Copy to clipboard as plain text (Markdown)\" />\r\n                <FunctionButton fn={toClipboardHTML} icon=\"ion:copy\" alt=\"Copy to clipboard as rich text\" />\r\n                <FunctionButton fn={exportTemplateAsFile} icon=\"bx:bxs-download\" alt=\"Save current template/contents as file\" />\r\n                <FunctionButton fn={loadTemplateFromFile} icon=\"ic:baseline-file-upload\" alt=\"Open a template/document from a file\" />\r\n                <FunctionButton fn={exportAbbrevsAsFile} icon=\"bx:bxs-save\" alt=\"Save your abbreviations into a file\" />\r\n                <FunctionButton fn={loadAbbrevsFromFile} icon=\"bi:cloud-upload\" alt=\"Load your abbreviations from a file\" />\r\n            </Toolbar>\r\n            <HoverMenu />\r\n            <SimpleBar className=\"editor\">\r\n                <Editable\r\n                    renderElement={renderElement}\r\n                    renderLeaf={renderLeaf}\r\n                    placeholder=\"Enter some text...\"\r\n                    spellCheck\r\n                    autoFocus\r\n                    onKeyDown={e => {\r\n                        // console.log(Editor.node(editor, editor.selection))\r\n                        onKeyDown(e);\r\n                        listKeyDown(editor)(e);\r\n                        hotkeyHandler(e, editor);\r\n                    }}\r\n                    onSelect={e => {\r\n                        // thanks:\r\n                        // https://github.com/ianstormtaylor/slate/issues/3750\r\n                        if (!(window as any).chrome)\r\n                            return\r\n                        if (editor.selection == null)\r\n                            return\r\n                        \r\n                        try {\r\n                            const domPoint = ReactEditor.toDOMPoint(\r\n                                editor,\r\n                                editor.selection.focus\r\n                            )\r\n                            const node = domPoint[0];\r\n                            if (node == null) return;\r\n                            const element = node.parentElement;\r\n                            if (element == null) return;\r\n                            element.scrollIntoView({behavior: \"smooth\", block: 'nearest'})\r\n                        } catch (e) {\r\n\r\n                        }\r\n                    }}\r\n                />\r\n            </SimpleBar>\r\n            {fragmentTarget && Object.keys(searchedAbbrevs).length > 0 && (\r\n                <HoverList opts={Object.keys(searchedAbbrevs)} pos={index} ref={searchRef} />\r\n            )}\r\n        </Slate>\r\n    )\r\n}\r\n","import { Editor, Element as SlateElement } from \"slate\";\r\n\r\nexport const withVoids = (editor: Editor): Editor => {\r\n    const { isInline, isVoid } = editor;\r\n    const voidElementNames = [\"template-block\"]\r\n\r\n    editor.isInline = (element: SlateElement) => {\r\n        let elemType = element.type as string;\r\n        return voidElementNames.includes(elemType) ? true : isInline(element);\r\n    }\r\n\r\n    editor.isVoid = (element: SlateElement) => {\r\n        let elemType = element.type as string;\r\n        return voidElementNames.includes(elemType) ? true : isVoid(element);\r\n    }\r\n    \r\n    return editor;\r\n}","import { Editor } from 'slate';\r\nimport { isHotkey } from 'is-hotkey';\r\n\r\nimport { HOTKEYS, BLOCK_HOTKEYS, FUNCTION_HOTKEYS, LIST_TYPES } from './consts';\r\nimport { toggleMark, toggleBlock } from './utils'\r\nimport { toggleListBlock } from './lists';\r\n\r\nexport const hotkeyHandler = (event: any, editor: Editor) => {\r\n    for (const hotkey in HOTKEYS) {\r\n        if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const mark = HOTKEYS[hotkey]\r\n            toggleMark(editor, mark)\r\n        }\r\n    }\r\n    for (const hotkey in BLOCK_HOTKEYS) {\r\n        if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const block = BLOCK_HOTKEYS[hotkey]\r\n            // todo: modify this function.\r\n            // if something is toggled to a list but it's just before or after another one,\r\n            // it should be merged with it as a bullet point\r\n            if (LIST_TYPES.includes(block)) {\r\n                switch (block) {\r\n                    case \"bulleted-list\":\r\n                        toggleListBlock(editor, \"bulleted-list\")\r\n                        break;\r\n                    case \"numbered-list\":\r\n                        toggleListBlock(editor, \"numbered-list\")\r\n                        break;\r\n                }\r\n            }\r\n            else\r\n                toggleBlock(editor, block)\r\n        }\r\n    }\r\n    for (const hotkey in FUNCTION_HOTKEYS) {\r\n        if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const fn = FUNCTION_HOTKEYS[hotkey]\r\n            fn(editor)\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { InlineIcon } from '@iconify/react-with-api';\r\n\r\nexport const HelpModalContents: React.FC =() => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"modal-body\">\r\n              <p>FastDischarge aims to be an open-source medical documentation platform that is truly <em>fast</em>.</p>\r\n              <p>\r\n                With FastDischarge, you can easily create template fields and prepopulate them with commonly used values of your choice.\r\n                FastDischarge lets you write your progress notes and discharge letters faster, so you can get back to doctoring.\r\n              </p>\r\n              <p>FastDischarge doesn't use any central servers; everything you enter into it is stored locally on your device, so there are no data privacy issues to worry about! (Don't believe me? Check the source code on <a href=\"https://github.com/newageoflight/fast-discharge\">Github</a>!)</p>\r\n              <h3>Usage guide</h3>\r\n              <h4>Writing documents and templates</h4>\r\n              <p>To <strong>create a template field</strong>, type <kbd>{\"{{\"}</kbd> into the editor or press the <InlineIcon icon=\"uil:brackets-curly\" /> button in the toolbar.</p>\r\n              <p><strong>Set your template options</strong> by clicking on the dropdown menu and typing in some text.</p>\r\n              <p><strong>Cycle to the next template field</strong> by pressing <kbd>TAB</kbd>; <strong>cycle to the previous template field</strong> by pressing <kbd>Shift+TAB</kbd></p>\r\n              <p>If you frequently use a snippet, you can save it as a \"dot abbreviation\" by selecting it and clicking the <InlineIcon icon=\"bi:dot\" /> dot icon in the hovering selection menu. You will be asked to give it a name.</p>\r\n              <p>You can later invoke the snippet by typing <kbd>.nameOfYourAbbreviation</kbd>, e.g. if you named it \"cag\" type <kbd>.cag</kbd></p>\r\n              <p>[UNDER DEVELOPMENT] You can also cycle to template fields by pressing <kbd>Ctrl+[</kbd> for the previous and <kbd>Ctrl+]</kbd> for the next</p>\r\n              <h4>Finalising documents</h4>\r\n              <p>To finalise your document and <strong>copy its contents as plain text</strong> (e.g. Web DeLacy), press the <InlineIcon icon=\"ion:copy-outline\" /> button in the toolbar.</p>\r\n              <p>To finalise your document and <strong>copy its contents as rich text</strong> (e.g. PowerChart), press the <InlineIcon icon=\"ion:copy\" /> button in the toolbar.</p>\r\n              <h4>Taking your settings with you</h4>\r\n              <p>I'm still not sure if there are legal issues around having user accounts to store your abbreviations, especially when sensitive patient data is concerned, so you'll have to store them as files if you want to take them around.</p>\r\n              <p>For this there are the <InlineIcon icon=\"bx:bxs-save\" /> \"save my abbreviations\" and <InlineIcon icon=\"bi:cloud-upload\" /> \"load my abbreviations\" buttons</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <h3>Contributing/credits</h3>\r\n              <p>FastDischarge might frequently break and be full of bugs because it's not even really in alpha yet, so don't expect too much out of it!</p>\r\n              <p>\r\n                If you have experience working with Slate.js, React.js or Typescript, please consider contributing to this project on <a href=\"https://github.com/newageoflight/fast-discharge\">Github</a>.\r\n              </p>\r\n              <p>Developed by <a href=\"mailto:camint3rnal@live.com\">Christopher Chen</a> (JMO/Intern)</p>\r\n            </div>\r\n      </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport Modal from \"react-modal\";\nimport \"./css/App.css\"\nimport logo from \"./running.svg\"\n\nimport { RichTextEditor } from './components/RichTextEditor';\nimport { InlineIcon } from '@iconify/react-with-api';\nimport { HelpModalContents } from './components/HelpModalContents';\n// fastDischarge should also be able to expose API endpoints where it receives parameters for certain values in a template\n\nfunction App() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          <img src={logo} alt=\"Running man\" style={{height: \"1em\", display: \"inline-block\", transform: \"translateY(6px)\"}} />\n          FastDischarge\n        </h1>\n      </header>\n      <div className=\"editor-container\">\n        <RichTextEditor />\n      </div>\n      <footer>\n        <div className=\"oneline\">\n          <p>&copy; <a href=\"https://github.com/newageoflight\">Christopher Chen</a> 2021-</p>\n          <button onClick={() => setModalOpen(true)}>\n            <InlineIcon icon=\"bx:bx-help-circle\" />\n          </button>\n        </div>\n      </footer>\n      <Modal isOpen={modalOpen} onRequestClose={() => setModalOpen(false)} contentLabel=\"About FastDischarge\">\n        <div className=\"modal-header\">\n          <h2>About FastDischarge</h2>\n          <button onClick={() => setModalOpen(false)}><InlineIcon icon=\"eva:close-fill\" /></button>\n        </div>\n        <HelpModalContents />\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}